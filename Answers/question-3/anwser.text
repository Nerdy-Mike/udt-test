1/ With ERD you have already designed on question 1, what database are you using to implement?
Based on the Entity-Relationship Diagram (ERD) I designed earlier, a suitable database management system for implementing this schema would be a relational database system like MySQL, PostgreSQL, or Oracle.

Relational databases are well-suited for storing and managing the structured data represented in the ERD, which consists of entities (tables) with defined relationships. The use of primary keys, foreign keys, and normalization principles aligns well with the relational database model.


2. Why are you using that? What is the strong and weak point of it? (1 Point)
Reasons for choosing PostgreSQL:

Open-Source and Free: PostgreSQL is an open-source database management system, which means it can be used and modified without any licensing costs, making it a cost-effective choice.
Compliance with SQL Standards: PostgreSQL adheres closely to SQL standards, ensuring compatibility with a wide range of tools and applications that support SQL.
Robustness and Reliability: PostgreSQL is known for its robust architecture, providing features like ACID (Atomicity, Consistency, Isolation, Durability) compliance, transaction support, and crash recovery mechanisms, ensuring data integrity and reliability.
Extensibility: PostgreSQL offers a powerful extension system that allows developers to create custom data types, functions, and procedural languages, enabling them to tailor the database to their specific needs.
Advanced Features: PostgreSQL includes advanced features such as support for JSON/JSONB data types, full-text search, spatial data types, and NoSQL-like capabilities, making it a versatile choice for various use cases.

Strengths of PostgreSQL:

Scalability: PostgreSQL can handle large amounts of data and high concurrency scenarios, making it suitable for enterprise-level applications and big data workloads.
Data Integrity: PostgreSQL enforces strict data integrity rules through constraints, foreign keys, and transactions, ensuring data consistency and preventing data anomalies.
SQL Compliance and Standards Adherence: PostgreSQL's close adherence to SQL standards facilitates easy migration from other database systems and ensures compatibility with a wide range of tools and applications.
Powerful Query Optimization: PostgreSQL's query optimizer is highly efficient, allowing for complex queries to be executed efficiently, even on large datasets.
Active Community and Documentation: PostgreSQL has a large and active community of developers, contributors, and users, ensuring ongoing development, support, and a vast collection of resources and documentation.

Weaknesses of PostgreSQL:

Steeper Learning Curve: Compared to some other database systems, PostgreSQL may have a steeper learning curve, especially for developers new to relational databases or SQL.
Memory Requirements: PostgreSQL can be memory-intensive, especially for large databases or complex queries, which may require careful memory management and optimization.
Lack of Native Sharding Support: While PostgreSQL supports various replication and scaling techniques, it does not natively support sharding (horizontal partitioning) out of the box, which may require additional tools or manual configurations.
Limited Built-in Caching: PostgreSQL's built-in caching mechanisms may not be as advanced as some proprietary database systems, potentially requiring additional caching solutions for optimal performance in certain scenarios.



